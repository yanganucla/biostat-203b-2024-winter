---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 22 @ 11:59PM
author: "Yang An and UID: 106332601"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 

1. Data preprocessing and feature engineering.

2. Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. 

```{r}
rm(list = ls())
library(tidymodels)
library(dplyr)
library(bigrquery)
library(dbplyr)
library(DBI)
library(gt)
library(gtsummary)
library(tidyverse)
set.seed(203)
# Load data
mimiciv_icu_cohort <- readRDS("/Users/yangan/Desktop/203B/203b-hw/hw4/mimiciv_shiny/mimic_icu_cohort.rds")

# sort
mimiciv_icu_cohort <- mimiciv_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id) |>
  select(-admit_provider_id, -last_careunit, -hospital_expire_flag, -dod, 
         ) |>
  mutate(los_long = los > 2) |>
  mutate(age = anchor_age + year(intime) - anchor_year) |>
  mutate(age = ifelse(age < 0, NA, age)) |>
  mutate(age = as.numeric(age)) |>
  mutate(los_long = as.factor(los_long)) |>
  mutate(race = as.factor(race)) |>
  mutate(marital_status = as.factor(marital_status)) |>
  mutate(gender = as.factor(gender)) |>
  mutate(langeuage = as.factor(language)) |>
  mutate(insurance = as.factor(insurance)) |>
  mutate(admission_type = as.factor(admission_type)) |>
  mutate(admission_location = as.factor(admission_location)) |>
  mutate(discharge_location = as.factor(discharge_location)) |>
  mutate(age = as.numeric(age)) |>
  select(-los, -anchor_age, -anchor_year, -anchor_year_group) |>
  na.omit() |>
  print() 

data_split <- initial_split(
  mimiciv_icu_cohort, 
  # stratify by los_long
  strata = "los_long", 
  prop = 0.5
  )
```


```{r}
library(gtsummary)
# Numerical summaries stratified by the outcome `los_long`.
mimiciv_icu_cohort |> tbl_summary(by = los_long)
```


3. Train and tune the models using the training set.

```{r}
mimic_other <- training(data_split)
dim(mimic_other)
```
```{r}
mimic_test <- testing(data_split)
dim(mimic_test)
```
###svm

```{r}
svm_recipe <- 
  recipe(
    los_long ~ first_careunit + admission_location + insurance + language +
      marital_status + race + gender + age + wbc + bicarbonate + glucose + 
      sodium + creatinine + chloride + hematocrit + potassium + 
      `non invasive blood pressure systolic` + 
      `non invasive blood pressure diastolic` + 
      `respiratory rate` + `heart rate` + `temperature fahrenheit`,
    data = mimic_other
  ) |>
  # create traditional dummy variables (necessary for svm)
  step_dummy(all_nominal_predictors()) |>
  # zero-variance filter
  step_zv(all_numeric_predictors()) |> 
  # center and scale numeric data
  step_normalize(all_numeric_predictors()) |>
  print()

```

```{r}
svm_mod <- 
  svm_rbf(
    mode = "classification",
    cost = tune(),
    rbf_sigma = tune()
  ) |> 
  set_engine("kernlab")
svm_mod
```

```{r}
svm_wf <- workflow() |>
  add_recipe(svm_recipe) |>
  add_model(svm_mod)
svm_wf
```

```{r}
param_grid <- grid_regular(
  cost(range = c(-15, 5)),
  rbf_sigma(range = c(-5, -3)),
  levels = c(12, 4)
  )
param_grid
```

```{r}
set.seed(203)

folds <- vfold_cv(mimic_other, v = 5)
folds
```

```{r}
svm_fit <- svm_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )
svm_fit
```




```{r}
svm_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = cost, y = mean, color = factor(rbf_sigma))) +
  geom_point() +
  labs(x = "Cost", y = "CV AUC") +
  scale_x_log10()
```

```{r}
svm_fit |>
  show_best("roc_auc")
```
```{r}
best_svm <- svm_fit |>
  select_best("roc_auc")
best_svm
```

```{r}
# Final workflow
final_wf <- svm_wf |>
  finalize_workflow(best_svm)
final_wf
```

```{r}
# Fit the whole training set, then predict the test cases
final_fit <- 
  final_wf |>
  last_fit(data_split)
final_fit
```

```{r}
# Test metrics
final_fit |> 
  collect_metrics()
```

  
###random forest

```{r}
library(GGally)
library(gtsummary)
library(ranger)
library(tidyverse)
library(tidymodels)

rf_recipe <- 
  recipe(
        los_long ~ first_careunit + admission_location + insurance + language +
      marital_status + race + gender + age + wbc + bicarbonate + glucose + 
      sodium + creatinine + chloride + hematocrit + potassium + 
      `non invasive blood pressure systolic` + 
      `non invasive blood pressure diastolic` + 
      `respiratory rate` + `heart rate` + `temperature fahrenheit`,
    data = mimic_other
  ) |>
  # create traditional dummy variables (necessary for svm)
  #step_dummy(all_nominal_predictors()) |>
  # zero-variance filter
  step_zv(all_numeric_predictors()) |> 
  # center and scale numeric data
  #step_normalize(all_numeric_predictors()) |>
  # estimate the means and standard deviations
  # prep(training = Heart_other, retain = TRUE) |>
  print()
```

```{r}
rf_mod <- 
  rand_forest(
    mode = "classification",
    mtry = tune(),
    trees = tune()
  ) |> 
  set_engine("ranger")
rf_mod
```

```{r}
rf_wf <- workflow() |>
  add_recipe(rf_recipe) |>
  add_model(rf_mod)
rf_wf
```

```{r}
param_grid2 <- grid_regular(
  trees(range = c(100L, 300L)),
  mtry(range = c(1L, 5L)),
  levels = c(5, 5)
  )
param_grid2
```

```{r}
set.seed(203)

folds <- vfold_cv(mimic_other, v = 5)
folds
```

```{r}
rf_fit <- rf_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid2,
    metrics = metric_set(roc_auc, accuracy)
    )
rf_fit
```




```{r}
rf_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = trees, y = mean, color = factor(mtry))) +
  geom_point() +
  labs(x = "Num. of Trees", y = "CV AUC") 
```

```{r}
rf_fit |>
  show_best("roc_auc")
```
```{r}
best_rf <- rf_fit |>
  select_best("roc_auc")
best_rf
```

```{r}
# Final workflow
final_wf2 <- rf_wf |>
  finalize_workflow(best_rf)
final_wf2
```

```{r}
# Fit the whole training set, then predict the test cases
final_fit2 <- 
  final_wf |>
  last_fit(data_split)
final_fit2
```

```{r}
# Test metrics
final_fit2 |> 
  collect_metrics()
```
###XGBoost

```{r}
library(GGally)
library(gtsummary)
library(ranger)
library(tidyverse)
library(tidymodels)
library(xgboost)

gb_recipe <- 
  recipe(
        los_long ~ first_careunit + admission_location + insurance + language +
      marital_status + race + gender + age + wbc + bicarbonate + glucose + 
      sodium + creatinine + chloride + hematocrit + potassium + 
      `non invasive blood pressure systolic` + 
      `non invasive blood pressure diastolic` + 
      `respiratory rate` + `heart rate` + `temperature fahrenheit`,
    data = mimic_other
  ) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_date(all_datetime()) %>%
  step_rm(starts_with(c("intime", "outtime", "admittime", "dischtime", "deathtime", "edregtime", "edouttime", "dod")))
gb_recipe

```

```{r}
gb_mod <- 
  boost_tree(
    mode = "classification",
    trees = 1000,
    tree_depth = tune(),
    learn_rate = tune()
  ) |> 
  set_engine("xgboost")
gb_mod
```

```{r}
gb_wf <- workflow() |>
  add_recipe(gb_recipe) |>
  add_model(gb_mod)
gb_wf
```

```{r}
param_grid3 <- grid_regular(
  tree_depth(range = c(1L, 3L)),
  learn_rate(range = c(-5, 2), trans = log10_trans()),
  levels = c(3,10)
  )
param_grid3
```

```{r}
set.seed(203)

folds <- vfold_cv(mimic_other, v = 5)
folds
```

```{r}
gb_fit <- gb_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid3,
    metrics = metric_set(roc_auc, accuracy)
    )
gb_fit
```




```{r}
gb_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = learn_rate, y = mean, color = factor(tree_depth))) +
  geom_point() +
  labs(x = "Learning Rate", y = "CV AUC") +
  scale_x_log10()
```

```{r}
gb_fit |>
  show_best("roc_auc")
```
```{r}
best_gb <- gb_fit |>
  select_best("roc_auc")
best_gb
```

```{r}
# Final workflow
final_wf3 <- gb_wf |>
  finalize_workflow(best_gb)
final_wf3
```

```{r}
# Fit the whole training set, then predict the test cases
final_fit3 <- 
  final_wf3 |>
  last_fit(data_split)
final_fit3
```

```{r}
# Test metrics
final_fit3 |> 
  collect_metrics()
```

```{r}
library(vip)

final_fit3 %>% 
  extract_fit_parsnip() %>% 
  vip()
```
### model stacking approach

```{r}
library(gtsummary)
library(keras)
library(ranger)
library(stacks)
library(tidyverse)
library(tidymodels)
library(xgboost)
mimic_recipe <- 
  recipe(
       los_long ~ first_careunit + admission_location + insurance + language +
      marital_status + race + gender + age + wbc + bicarbonate + glucose + 
      sodium + creatinine + chloride + hematocrit + potassium + 
      `non invasive blood pressure systolic` + 
      `non invasive blood pressure diastolic` + 
      `respiratory rate` + `heart rate` + `temperature fahrenheit`,
    data = mimic_other
  ) |>
  # create traditional dummy variables (necessary for xgboost)
  step_dummy(all_nominal_predictors()) |>
  # zero-variance filter
  step_zv(all_predictors()) 
  # estimate the means and standard deviations
  # prep(training = Heart_other, retain = TRUE)
mimic_recipe
```

```{r}
set.seed(203)
folds <- vfold_cv(mimic_other, v = 5)
folds
```
####svm
```{r}
svm_mod2 <- 
  svm_rbf(
    mode = "classification",
    cost = tune(),
    rbf_sigma = tune()
  ) |>
  set_engine("kernlab")
svm_mod2
```

```{r}
svm_wf2 <- workflow() |>
  add_recipe(mimic_recipe) |>
  add_model(svm_mod2)
svm_wf2
```

```{r}
svm_grid2 <- grid_regular(
   cost(range = c(-15, 5)),
  rbf_sigma(range = c(-5, -3)),
  levels = c(12, 4)
)

svm_res2 <- tune_grid(
  object = svm_wf2,
  resamples = folds,
  grid = svm_grid2,
  control = control_stack_grid()
)

svm_res2
```
####random forest
```{r}
rf_mod2 <- 
  rand_forest(
    mode = "classification",
    # Number of predictors randomly sampled in each split
    mtry = tune(),
    # Number of trees in ensemble
    trees = tune()
  ) |>
  set_engine("ranger")
rf_mod2
```

```{r}
rf_wf2 <- workflow() |>
  add_recipe(mimic_recipe) |>
  add_model(rf_mod2)
rf_wf2
```

```{r}
rf_grid2 <- grid_regular(
  trees(range = c(100L, 500L)),
  mtry(range = c(1L, 5L)),
  levels = c(5, 5)
)

rf_res2 <- tune_grid(
  object = rf_wf2,
  resamples = folds,
  grid = rf_grid2,
  control = control_stack_grid()
)

rf_res2
```

####XGboost
```{r}
gb_mod2 <- 
  boost_tree(
    mode = "classification",
    trees = 1000,
    tree_depth = tune(),
    learn_rate = tune()
  ) |> 
  set_engine("xgboost")
gb_mod2
```

```{r}
gb_wf2 <- workflow() |>
  add_recipe(mimic_recipe) |>
  add_model(gb_mod2)
gb_wf2
```

```{r}
gb_grid2 <- grid_regular(
  tree_depth(range = c(1L, 3L)),
  learn_rate(range = c(-5, 2), trans = log10_trans()),
  levels = c(3,10)
  )

gb_res2 <- 
  tune_grid(
    object = gb_wf2, 
    resamples = folds, 
    grid = gb_grid2,
    control = control_stack_grid()
  )
gb_res2
```


```{r}
mimic_model_st <- 
  # initialize the stack
  stacks() |>
  # add candidate members
  add_candidates(svm_res2) |>
  add_candidates(rf_res2) |>
  add_candidates(gb_res2) |>
  # determine how to combine their predictions
  blend_predictions(
    penalty = 10^(-6:2),
    metrics = c("roc_auc")
    ) |>
  # fit the candidates with nonzero stacking coefficients
  fit_members()
mimic_model_st
```

```{r}
mimic_model_st
```

```{r}
autoplot(mimic_model_st)
```

```{r}
autoplot(mimic_model_st, type = "members")
```

```{r}
autoplot(mimic_model_st, type = "weights")
```

```{r}
collect_parameters(mimic_model_st, "rf_res2")
```

```{r}
mimic_pred <- mimic_test %>%
  bind_cols(predict(mimic_model_st, ., type = "prob")) %>%
  print(width = Inf)
```

```{r}
yardstick::roc_auc(
  mimic_pred,
  truth = los_long,
  contains(".pred_FALSE")
  )
```
We can use the members argument to generate predictions from each of the ensemble members.
```{r}
mimic_pred <-
  mimic_test |>
  select(los_long) |>
  bind_cols(
    predict(
      mimic_model_st,
      mimic_test,
      type = "class",
      members = TRUE
      )
    ) |>
  print(width = Inf)
```

```{r}
map(
  colnames(mimic_pred),
  ~mean(mimic_pred$los_long == pull(mimic_pred, .x))
  ) |>
  set_names(colnames(mimic_pred)) |>
  as_tibble() |>
  pivot_longer(c(everything(), -los_long))
```

4. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?
```{r}
num_subjects <- mimiciv_icu_cohort %>%
  distinct(subject_id) %>%
  nrow()

print(num_subjects)
```



```{r}
# svm Test metrics
final_fit |> 
  collect_metrics()
```

```{r}
# random forest Test metrics
final_fit2 |> 
  collect_metrics()
```

```{r}
# xgboost Test metrics
final_fit3 |> 
  collect_metrics()
```

```{r}
# stacking Test metrics
mimic_pred <- mimic_test %>%
  bind_cols(predict(mimic_model_st, ., type = "prob")) 

yardstick::roc_auc(
  mimic_pred,
  truth = los_long,
  contains(".pred_FALSE")
  )
```

```{r}
#feature importance
library(vip)

final_fit3 %>% 
  extract_fit_parsnip() %>% 
  vip()
```

In my analysis, there were n = 3748 patients in the MIMIC-IV ICU cohort, and 50/50 split.
I build three machine learning models and a model stacking to predict long ICU stays. The three models are logistic regression, random forest, and xgboost. The model stacking is a combination of the three models. The area under the ROC curve and accuracy for each machine learning algorithm and the model stacking are as follows:
SVM (Support Vector Machine): AUC = 0.57, Accuracy = 0.62
This model has an AUC of 0.57, indicating that its ability to distinguish between the classes (e.g., predicting whether a patient's ICU stay will be longer than 2 days) is slightly better than random guessing, which would have an AUC of 0.5. The accuracy of 0.62 means that 62% of the model's predictions match the actual data. In other words, it correctly predicts the outcome for approximately 62 out of every 100 cases.
Random Forest: AUC = 0.57, Accuracy = 0.62
The Random Forest model also shows an AUC of 0.57, similar to the SVM, suggesting a similar level of capability in distinguishing between the classes. With an accuracy of 0.62, it correctly predicts 62% of the outcomes, indicating that its overall predictive performance is similar to that of the SVM model.
XGBoost: AUC = 0.52, Accuracy = 0.61
The XGBoost model has a lower AUC of 0.52, which means it's slightly better than random chance but not as effective as the SVM or Random Forest models in distinguishing between the classes. Its accuracy of 0.61 indicates that it correctly predicts the outcome for 61 out of every 100 cases, which is slightly lower than the other two models but still above random guessing.
Stacking: AUC = 0.57, Accuracy = 0.63
The Stacking model combines predictions from multiple models and has an AUC of 0.57, indicating a similar ability to distinguish between classes as the SVM and Random Forest models. However, it slightly improves on accuracy with a score of 0.63, meaning it correctly predicts the outcome for 63 out of every 100 cases, making it the most accurate of the models listed here.
Overall, all four models perform better than random guessing (AUC > 0.5), but none show a particularly strong ability to distinguish between the classes, as indicated by AUC values close to 0.5. The Stacking model shows a slight improvement in accuracy over the individual models, suggesting that combining multiple models' predictions can enhance predictive performance.
The most important features in predicting long ICU stays are the age of the patient, temperature fahrenheit, and heart rate. High heart rate is predictive of long term stay because it is a sign of stress and the body is working harder to maintain the body temperature. 
In conclusion, the stacking model has the best performance and is the most interpretable. The stacking model is the best model for predicting long ICU stays. It has the highest AUC and accuracy, and it combines the predictions of multiple models to enhance predictive performance. The stacking model is the most interpretable because it combines the predictions of multiple models, allowing for a more comprehensive understanding of the data and the factors that influence long ICU stays.




