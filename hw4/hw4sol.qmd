---
title: "Biostat 203B Homework 4"
subtitle: "Due Mar 8 @ 11:59PM"
author: "Yang An and UID: 106332601"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
execute:
  eval: false
---

Display machine information:

```{r}
rm(list = ls())
sessionInfo()
```

Display my machine memory.

```{r}
memuse::Sys.meminfo()
```

Load database libraries and the tidyverse frontend:

```{r}
library(bigrquery)
library(dbplyr)
library(DBI)
library(gt)
library(gtsummary)
library(tidyverse)
```

## Q1. Compile the ICU cohort in HW3 from the Google BigQuery database

Below is an outline of steps. In this homework, we exclusively work with the BigQuery database and should not use any MIMIC data files stored on our local computer. Transform data as much as possible in BigQuery database and `collect()` the tibble only at the end of Q1.7.

### Q1.1 Connect to BigQuery

Authenticate with BigQuery using the service account token. Please place the service account token (shared via BruinLearn) in the working directory (same folder as your qmd file). Do **not** add this token to your git repository.

```{r}
# path to the service account token 
satoken <- "biostat-203b-2024-winter-313290ce47a6.json"
# BigQuery authentication using service account
bq_auth(path = satoken)
```

Connect to BigQuery database `mimic4_v2_2` in GCP (Google Cloud Platform), using the project billing account `biostat-203b-2024-winter`.

```{r}
# connect to the BigQuery database `biostat-203b-2024-winter.mimic4_v2_2`
con_bq <- dbConnect(
    bigrquery::bigquery(),
    project = "biostat-203b-2024-winter",
    dataset = "mimic4_v2_2",
    billing = "biostat-203b-2024-winter"
)
con_bq
```

List all tables in the `mimic4_v2_2` database.

```{r}
dbListTables(con_bq)
```

### Q1.2 `icustays` data

Connect to the `icustays` table.

```{r}
# full ICU stays table
icustays_tble <- tbl(con_bq, "icustays") |>
  # show_query() |>
  print(width = Inf)
```

### Q1.3 `admissions` data

Connect to the `admissions` table.

```{r}
# # TODO
admissions_tble <- tbl(con_bq, "admissions") |>
#   # show_query() |>
    print(width = Inf)
```

### Q1.4 `patients` data

Connect to the `patients` table.

```{r}
# # TODO
 patients_tble <- tbl(con_bq, "patients") |>
#   # show_query() |>
    print(width = Inf)
```

### Q1.5 `labevents` data

Connect to the `labevents` table and retrieve a subset that only contain subjects who appear in `icustays_tble` and the lab items listed in HW3. Only keep the last lab measurements before the ICU stay and pivot lab items to become variables/columns. Write all steps in *one* chain of pipes.

```{r}
# # TODO
d_labitems_tble <- tbl(con_bq, "d_labitems") |> 
  filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) |>
  print(width = Inf)
```

```{r}
# # TODO
icustays_tble <- tbl(con_bq, "icustays") |> print(width = Inf)
```

```{r}
labevents_tble <- tbl(con_bq, "labevents") |>
  select(subject_id, itemid, valuenum, storetime) |>
  semi_join(icustays_tble, by = "subject_id") |>
  semi_join(d_labitems_tble, by = "itemid") |>
  left_join(select(icustays_tble, subject_id, stay_id, intime), by = c("subject_id" = "subject_id")) |>
  filter(storetime < intime) |>
  group_by(subject_id, stay_id, itemid) |>
  slice_max(storetime, n = 1) |>
  select(-intime, -storetime) |>
  ungroup() |>
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  rename_at(
    .vars = vars(as.character(pull(d_labitems_tble, itemid))),
    .funs = ~str_to_lower(pull(d_labitems_tble, label))
  ) |>
  rename(wbc = `white blood cells`) |>
  arrange(subject_id, stay_id)

print(labevents_tble, width = Inf)

```

### Q1.6 `chartevents` data

Connect to `chartevents` table and retrieve a subset that only contain subjects who appear in `icustays_tble` and the chart events listed in HW3. Only keep the first chart events during ICU stay and pivot chart events to become variables/columns. Write all steps in *one* chain of pipes.
```{r}
# # TODO
d_items_tble <- tbl(con_bq, "d_items") |> 
  filter(itemid %in% c(
    220045, # HR
    220179, # NBPS
    220180, # NPBd
    220210, # RR
    223761 # Temp F
  )) |>
  print(width = Inf)
```

```{r}
# # TODO
icustays_tble <- tbl(con_bq, "icustays") |>
  arrange(subject_id, hadm_id) |>
  print(width = Inf)
```

```{r}
chartevents_tble <- tbl(con_bq, "chartevents") |>
  select(subject_id, stay_id, itemid, charttime, valuenum) |>
  semi_join(icustays_tble, by = "subject_id") |>
  semi_join(d_items_tble, by = "itemid") |>
  left_join(select(icustays_tble, stay_id, intime, outtime), by = c("stay_id")) |>
  filter(charttime >= intime, charttime <= outtime) |>
  group_by(subject_id, stay_id, itemid) |>
  slice_min(charttime, n = 1) |>
  select(-charttime, -intime, -outtime) |>
  ungroup() |>
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  rename_at(
    .vars = vars(as.character(pull(d_items_tble, itemid))),
    .funs = ~str_to_lower(pull(d_items_tble, label))
  ) |>
  arrange(subject_id, stay_id)

print(chartevents_tble, width = Inf)

```

### Q1.7 Put things together

This step is similar to Q7 of HW3. Using *one* chain of pipes `|>` to perform following data wrangling steps: (i) start with the `icustays_tble`, (ii) merge in admissions and patients tables, (iii) keep adults only (age at ICU intime \>= 18), (iv) merge in the labevents and chartevents tables, (v) `collect` the tibble.

```{r}
# # TODO
 mimic_icu_cohort <- icustays_tble |>
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) |>
  left_join(patients_tble, by = c("subject_id")) |>
  mutate(age = anchor_age + year(intime) - anchor_year) %>%
   filter(age >= 18) |>
   left_join(labevents_tble, by = c("subject_id", "stay_id")) |>
   left_join(chartevents_tble, by = c("subject_id", "stay_id")) |>
   arrange(subject_id, stay_id) |>
   collect() |>
  print(width = Inf)

```

### Q1.8 Preprocessing

Perform the following preprocessing steps. (i) Lump infrequent levels into "Other" level for `first_careunit`, `last_careunit`, `admission_type`, `admission_location`, and `discharge_location`. (ii) Collapse the levels of `race` into `ASIAN`, `BLACK`, `HISPANIC`, `WHITE`, and `Other`. (iii) Create a new variable `los_long` that is `TRUE` when `los` is greater than or equal to 2 days. (iv) Summarize the data using `tbl_summary()`, stratified by `los_long`. Hint: `fct_lump` and `fct_collapse` from the `forcats` package can be useful.

Hint: Below is a numerical summary of my tibble after preprocessing:

<iframe width="95%" height="500" src="./mimic_icu_cohort_gtsummary.html">

</iframe>

```{r}
race_table <- table(mimic_icu_cohort$race)
print(race_table)
```


```{r}
library(dplyr)
library(forcats)
library(gtsummary)

# Lump infrequent levels into "Other" for specified variables
mimic_icu_cohort <- mimic_icu_cohort %>%
  mutate(
    first_careunit = fct_lump(first_careunit, n = 10, other_level = "Other"),
    last_careunit = fct_lump(last_careunit, n = 10, other_level = "Other"),
    admission_type = fct_lump(admission_type, n = 10, other_level = "Other"),
    admission_location = fct_lump(admission_location, n = 10, other_level = "Other"),
    discharge_location = fct_lump(discharge_location, n = 10, other_level = "Other")
  )

# Collapse levels of race into specified categories
mimic_icu_cohort <- mimic_icu_cohort %>%
  mutate(
    race = fct_collapse(
      race,
      ASIAN = c("ASIAN", "ASIAN - ASIAN INDIAN", "ASIAN - CHINESE", "ASIAN - KOREAN", "ASIAN - SOUTH EAST ASIAN"),
      BLACK = c("BLACK/AFRICAN", "BLACK/AFRICAN AMERICAN", "BLACK/CAPE VERDEAN", "BLACK/CARIBBEAN ISLAND"),
      HISPANIC = c("HISPANIC OR LATINO", "HISPANIC/LATINO - CENTRAL AMERICAN", "HISPANIC/LATINO - COLUMBIAN", "HISPANIC/LATINO - CUBAN", "HISPANIC/LATINO - DOMINICAN", "HISPANIC/LATINO - GUATEMALAN", "HISPANIC/LATINO - HONDURAN", "HISPANIC/LATINO - MEXICAN", "HISPANIC/LATINO - PUERTO RICAN", "HISPANIC/LATINO - SALVADORAN"),
      WHITE = c("WHITE", "WHITE - BRAZILIAN", "WHITE - EASTERN EUROPEAN", "WHITE - RUSSIAN", "WHITE - OTHER EUROPEAN"),
      Other = c("AMERICAN INDIAN/ALASKA NATIVE", "MULTIPLE RACE/ETHNICITY", "NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER", "PORTUGUESE","SOUTH AMERICAN","UNKNOWN")
    )
  )

# Create new variable los_long
mimic_icu_cohort <- mimic_icu_cohort %>%
  mutate(los_long = los >= 2)

# Summarize the data using tbl_summary(), stratified by los_long
summary_table <- mimic_icu_cohort %>%
  select(-subject_id, -stay_id, -hadm_id, -admit_provider_id) %>%
  tbl_summary(by = los_long, missing = "no")

# Print summary table
summary_table
```

    
### Q1.9 Save the final tibble

Save the final tibble to an R data file `mimic_icu_cohort.rds` in the `mimiciv_shiny` folder.

```{r}
# make a directory mimiciv_shiny
if (!dir.exists("mimiciv_shiny")) {
  dir.create("mimiciv_shiny")
}
# save the final tibble
mimic_icu_cohort |>
  write_rds("mimiciv_shiny/mimic_icu_cohort.rds", compress = "gz")
```

Close database connection and clear workspace.

```{r}
if (exists("con_bq")) {
  dbDisconnect(con_bq)
}
rm(list = ls())
```
```{r}
unknown_levels <- levels(mimic_icu_cohort$race)[!levels(mimic_icu_cohort$race) %in% c("ASIAN", "BLACK", "HISPANIC", "WHITE", "Other")]
print(unknown_levels)
```
Although it is not a good practice to add big data files to git, for grading purpose, please add `mimic_icu_cohort.rds` to your git repository.

## Q2. Shiny app

Develop a Shiny app for exploring the ICU cohort data created in Q1. The app should reside in the `mimiciv_shiny` folder. The app should contains at least two tabs. One tab provides easy access to the graphical and numerical summaries of variables (demographics, lab measurements, vitals) in the ICU cohort. The other allows user to choose a specific patient in the cohort and display the patient's ADT and ICU stay information as we did in Q1 of HW3.

```{r}
library(shiny)

# Define UI for dataset viewer app ----
ui <- fluidPage(
  
  # App title ----
  titlePanel("Title"),
  
  # Sidebar layout with input and output definitions ----
  
  fluidRow(
    
    column(4,
           
           
           
           # Input: Text for providing a caption ----
           # Note: Changes made to the caption in the textInput control
           # are updated in the output area immediately as you type
           textInput(inputId = "caption",
                     label = "Caption:",
                     value = "Data Summary"),
           
           # Input: Selector for choosing dataset ----
           selectInput(inputId = "dataset",
                       label = "Choose a dataset:",
                       choices = c("rock", "pressure", "cars")),
           
           # Input: Numeric entry for number of obs to view ----
           numericInput(inputId = "obs",
                        label = "Number of observations to view:",
                        value = 10)
           
           
           
    ),
    
    column(8,
           tabsetPanel(
             tabPanel("Summary",
                      h5('subtitle1'),
                      verbatimTextOutput("summary")
             ),
             
             tabPanel("Table",
                      h5('subtitle2'),
                      tableOutput("view")
             )
           ),
           
           mainPanel(
             
           )
    )
  )
)

# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
  
  # Return the requested dataset ----
  # By declaring datasetInput as a reactive expression we ensure
  # that:
  #
  # 1. It is only called when the inputs it depends on changes
  # 2. The computation and result are shared by all the callers,
  #    i.e. it only executes a single time
  datasetInput <- reactive({
    switch(input$mimic_icu_cohort,
           "rock" = demographics,
           "pressure" = lab_measurements,
           "cars" = vitals)
  })
  
  # Create caption ----
  # The output$caption is computed based on a reactive expression
  # that returns input$caption. When the user changes the
  # "caption" field:
  #
  # 1. This function is automatically called to recompute the output
  # 2. New caption is pushed back to the browser for re-display
  #
  # Note that because the data-oriented reactive expressions
  # below don't depend on input$caption, those expressions are
  # NOT called when input$caption changes
  output$caption <- renderText({
    input$caption
  })
  
  # Generate a summary of the dataset ----
  # The output$summary depends on the datasetInput reactive
  # expression, so will be re-executed whenever datasetInput is
  # invalidated, i.e. whenever the input$dataset changes
  output$summary <- renderPrint({
    dataset <- datasetInput()
    summary(dataset)
  })
  
  # Show the first "n" observations ----
  # The output$view depends on both the databaseInput reactive
  # expression and input$obs, so it will be re-executed whenever
  # input$dataset or input$obs is changed
  output$view <- renderTable({
    head(datasetInput(), n = input$obs)
  })
  
}

# Create Shiny app ----
shinyApp(ui, server)

```
```{r}
cohort <- readRDS("mimiciv_shiny/mimic_icu_cohort.rds")
head(cohort)
```

```{r}
library(shiny)
library(dplyr)
library(gtsummary)



# Define UI for the application
ui <- fluidPage(
  titlePanel("MIMIC-IV ICU Cohort Exploration"),
  
  # Define the sidebar layout
  sidebarLayout(
    sidebarPanel(
      # Add tabs for different sections
      tabsetPanel(
        tabPanel("Summary", 
                 h3("Graphical and Numerical Summaries"),
                 # Add UI elements for summaries
                 # For example, add checkboxes or dropdowns for selecting variables
        ),
        tabPanel("Patient Details",
                 h3("Patient Information"),
                 # Add UI elements for selecting a specific patient
                 # For example, add a dropdown for selecting patient ID
        )
      )
    ),
    
    # Define the main panel
    mainPanel(
      # Display the summaries or patient details based on tab selection
      uiOutput("output_tab")
    )
  )
)

# Define server logic
server <- function(input, output) {
  
  # Render the appropriate tab based on user selection
  output$output_tab <- renderUI({
    switch(input$tab_selected,
           "Summary" = ui_output_summary(),
           "Patient Details" = ui_output_patient_details()
    )
  })
  
  # Define UI for the Summary tab
  ui_output_summary <- function() {
    fluidRow(
      column(12, 
             h4("Graphical and Numerical Summaries"),
             # Add UI elements for displaying summaries
             # For example, add plotOutput or tableOutput
      )
    )
  }
  
  # Define UI for the Patient Details tab
  ui_output_patient_details <- function() {
    fluidRow(
      column(12, 
             h4("Patient Information"),
             # Add UI elements for displaying patient details
             # For example, add textOutput or dataTableOutput
      )
    )
  }
}

# Run the application
shinyApp(ui = ui, server = server)
```

